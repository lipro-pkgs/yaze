#!/usr/bin/env bash
#
# debian/yaze-test.sh.in
# Part of the Debian package ‘yaze-test’.
#
# Copyright © 2017 Stephan Linz <linz@li-pro.net>
#
# This is free software; you may copy, modify, and/or distribute this
# work under the terms of the Apache License, version 2.0 as published
# by the Apache Software Foundation. No warranty expressed or implied.
# See the file ‘/usr/share/common-licenses/Apache-2.0’ for details.

BINDIR=${BINDIR:=@BINDIR@}
LIBDIR=${LIBDIR:=@LIBDIR@}

EXFILE=${EXFILE:=${BINDIR}/yaze}
EXPECT=${EXPECT:=${LIBDIR}/yaze.exp}
RCFILE=${RCFILE:=${LIBDIR}/yaze-test.rc}

TSTDRV=${TSTDRV:=b}


declare -a test_cases
test_cases=("prelim" "zexdoc" "zexall")

declare -A test_fixtures
test_fixtures[prelim]="${LIBDIR}/fixtures/prelim"
test_fixtures[zexdoc]="${LIBDIR}/fixtures/zexlex"
test_fixtures[zexall]="${LIBDIR}/fixtures/zexlex"


declare -A test_case_prelim
test_case_prelim[cmd]="${TSTDRV}:prelim"
test_case_prelim[dcr]="Preliminary Z80 tests"

declare -A test_case_zexdoc
test_case_zexdoc[cmd]="${TSTDRV}:zexdoc"
test_case_zexdoc[dcr]="Z80 instruction set exerciser (documented-flag)"

declare -A test_case_zexall
test_case_zexall[cmd]="${TSTDRV}:zexall"
test_case_zexall[dcr]="Z80 instruction set exerciser (full-flag)"


declare -i __verbose=$(false; echo $?)

function __verbose_output () {
	if [[ ${__verbose} == $(false; echo $?) ]]; then
		echo -en "${1}"
	else
		echo -en "${2}"
	fi
}

function __verbose_tee () {
	if [[ ${__verbose} == $(false; echo $?) ]]; then
		cat
	else
		tee /dev/tty
	fi
}


function filter_output () {
	cat | 	grep -v '^spawn.*$' | \
		grep -v '^Running.*yaze\.boot.*$' | \
		grep -v '^[A,B,C,D]>.*$' | \
		sed -e 's/\r//g'
}

function exec_yaze () {
	echo -en "${1}\nsys quit" | \
		${EXPECT} ${EXFILE} ${RCFILE} - | \
		__verbose_tee | filter_output
}

function eval_test_case () {
	local -i rc=0

	__verbose_output "yaze(${1}): " "${3}...\n"
	exec_yaze ${1} | cmp -s ${2} -

	rc=${?}
	if [[ ${rc} != 0 ]]; then
		__verbose_output "FAIL\n" ""
	else
		__verbose_output "OK\n" ""
	fi

	return ${rc}
}

function main () {
	local dcr
	local cmd
	local fix
	local -i fail=0

	for tc in ${1}; do
		eval dcr="\${test_case_${tc}[dcr]}"
		eval cmd="\${test_case_${tc}[cmd]}"
		eval fix="\${test_fixtures[${tc}]}"

		if ! eval_test_case "${cmd}" "${fix}" "${dcr}"; then
			let fail++
		fi

	done

	return ${fail}
}


while getopts ":ls:v" opt; do
	case $opt in
		l)
			echo "Possible test cases: ${test_cases[@]}"
			exit 0
			;;
		s)
			if [[ " ${test_cases[@]} " =~ " ${OPTARG} " ]]; then
				test_cases=("${OPTARG}")
			else
				echo "Invalid test case: ${OPTARG}" >&2
				exit 1
			fi
			;;
		v)
			__verbose=$(true; echo $?)
			;;
		\?)
			echo "Invalid option: -${OPTARG}" >&2
			exit 1
			;;
		:)
			echo "Option -${OPTARG} requires an argument." >&2
			exit 1
			;;
	esac
done

main "${test_cases[*]}"
exit ${?}


# Local variables:
# coding: utf-8
# mode: shell-script
# indent-tabs-mode: nil
# End:
# vim: fileencoding=utf-8 filetype=bash expandtab :
