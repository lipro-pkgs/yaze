From: Stephan Linz <linz@li-pro.net>
Date: Sat, 28 Oct 2017 19:20:36 +0200
Subject: avoid warnings of ignored return value

The void cast of result value is the standard convention to say
"this result is unused intentionally" and universally recognized,
except by gcc because someone decided 20 years ago that there
should be no way to ignore a warn_unused_result. Many compilers
will optimize away this void cast, as it is unnecessary, and then
an unused variable error will still be produced. GCC will still
warn even when you do this. See this discussion for more info:

    http://gcc.gnu.org/bugzilla/show_bug.cgi?id=25509

Signed-off-by: Stephan Linz <linz@li-pro.net>
---
 bios.c    |  5 +++--
 cdm.c     |  6 ++++--
 monitor.c |  6 ++++--
 yaze.c    | 13 +++++++++++--
 4 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/bios.c b/bios.c
index d81ddc9..eb13a01 100644
--- a/bios.c
+++ b/bios.c
@@ -302,13 +302,14 @@ static void
 serout(int chan, char c)
 {
     struct sio *s = getsiop(chan);
+    unsigned int unused __attribute__((unused));
 
     if (s->fp == NULL)
 	return;
     if (s->tty)
-	(void) write(fileno(s->fp), &c, 1);
+	unused = write(fileno(s->fp), &c, 1);
     else
-	fwrite(&c, 1, 1, s->fp);
+	unused = fwrite(&c, 1, 1, s->fp);
 }
 
 static WORD
diff --git a/cdm.c b/cdm.c
index c661602..4bcf34f 100644
--- a/cdm.c
+++ b/cdm.c
@@ -1541,6 +1541,8 @@ dorename(char *tok)
 static int
 doshell(char *cmd)
 {
+    /* there is no handling of shell execution errors */
+    int unused __attribute__((unused));
     void (*sigint)(int);
     char *shell = getenv("SHELL");
 
@@ -1548,9 +1550,9 @@ doshell(char *cmd)
 	shell = "/bin/sh";
     sigint = signal(SIGINT, SIG_IGN);
     if (cmd[1])
-	system(cmd+1);
+	unused = system(cmd+1);
     else
-	system(shell);
+	unused = system(shell);
     (void) signal(SIGINT, sigint);
     return 0;
 }
diff --git a/monitor.c b/monitor.c
index f4c7263..70c504c 100644
--- a/monitor.c
+++ b/monitor.c
@@ -935,6 +935,8 @@ dogo(char *cmd)
 static int
 doshell(char *cmd)
 {
+    /* there is no handling of shell execution errors */
+    int unused __attribute__((unused));
     char *shell = getenv("SHELL");
 #ifdef DEBUG
     void (*sigint)(int);
@@ -944,9 +946,9 @@ doshell(char *cmd)
     if (shell == NULL)
 	shell = "/bin/sh";
     if (cmd[1])
-	system(cmd+1);
+	unused = system(cmd+1);
     else
-	system(shell);
+	unused = system(shell);
 #ifdef DEBUG
     (void) signal(SIGINT, sigint);
 #endif
diff --git a/yaze.c b/yaze.c
index b3fedb1..104f516 100644
--- a/yaze.c
+++ b/yaze.c
@@ -112,6 +112,7 @@ static void
 load_cpm(const char *bfname)
 {
     FILE *cpm;
+    size_t readsz;
 #ifdef BIOS
     int i, skip = 0;
     WORD offs;
@@ -132,8 +133,12 @@ load_cpm(const char *bfname)
 	exit(1);
     }
     if (loadadr >= 0) {
-	fread(ram+loadadr, 1, 64*1024-loadadr, cpm);
+	readsz = fread(ram + loadadr, 1, 64*1024-loadadr, cpm);
 	fclose(cpm);
+	if (readsz == 0) {
+	    fprintf(stderr, "%s is empty\n", bfname);
+	    exit(1);
+	}
 	pc = loadadr;
 #ifdef BIOS
 	regs[regs_sel].hl = ccp_base;
@@ -150,7 +155,11 @@ load_cpm(const char *bfname)
 	skip = 0x880;
 	fseek(cpm, skip, SEEK_SET);
     }
-    fread(ram + ccp_base, CPM_LENGTH, 1, cpm);
+    readsz = fread(ram + ccp_base, CPM_LENGTH, 1, cpm);
+    if (readsz == 0) {
+	fprintf(stderr, "%s has insufficient size or is empty\n", bfname);
+	exit(1);
+    }
     if (sb.st_size < 2*CPM_LENGTH) {
 	/* single, non-relocatable copy */
 	if (ram[ccp_base] == 0xc3 && (ram[ccp_base+2]&0xfc) != basepage)
